/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 ./public/wardrobe-2.glb --t 
Author: Livia Chandra (https://sketchfab.com/VeritasCH)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/wardrobe-0ffc613382464390892f278e75074c9c
Title: Wardrobe
*/

import * as THREE from 'three'
import React, { useContext, useRef } from 'react'
import { useGLTF, useTexture } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { DimensionContext } from '../../contexts/DimensionContext'
import { MaterialContext } from '../../contexts/MaterialContext'
import { useLoader } from '@react-three/fiber'
import { BaseContext } from '../../contexts/BaseContext'
import { DoorsContext } from '../../contexts/DoorsContext'
import { ShelvesContext } from '../../contexts/ShelvesContext'

type GLTFResult = GLTF & {
  nodes: {
    Cube_0: THREE.Mesh
    Cube001_0: THREE.Mesh
    Cube002_0: THREE.Mesh
    Cube003_0: THREE.Mesh
    Cube004_0: THREE.Mesh
    Cube005_0: THREE.Mesh
    Cube006_0: THREE.Mesh
    Cube007_0: THREE.Mesh
    Cube008_0: THREE.Mesh
    Cube009_0: THREE.Mesh
    Cube010_0: THREE.Mesh
    Cylinder_0: THREE.Mesh
    Cylinder001_0: THREE.Mesh
    Cylinder002_0: THREE.Mesh
    Cylinder003_0: THREE.Mesh
    Cylinder004_0: THREE.Mesh
    Cylinder005_0: THREE.Mesh
    Cylinder006_0: THREE.Mesh
    Cylinder007_0: THREE.Mesh
    Cube011_0: THREE.Mesh
    Cube012_0: THREE.Mesh
    Cube013_0: THREE.Mesh
    Cube014_0: THREE.Mesh
  }
  materials: {
    ['Material.007']: THREE.MeshStandardMaterial
    ['Material.011']: THREE.MeshStandardMaterial
    ['Material.003']: THREE.MeshStandardMaterial
    ['Material.002']: THREE.MeshStandardMaterial
    ['Material.001']: THREE.MeshStandardMaterial
    ['Material.006']: THREE.MeshStandardMaterial
    ['Material.010']: THREE.MeshStandardMaterial
    ['Material.008']: THREE.MeshStandardMaterial
    ['Material.009']: THREE.MeshStandardMaterial
    ['Material.004']: THREE.MeshStandardMaterial
    ['Material.005']: THREE.MeshStandardMaterial
    ['Material.016']: THREE.MeshStandardMaterial
    ['Material.015']: THREE.MeshStandardMaterial
    ['Material.012']: THREE.MeshStandardMaterial
    ['Material.013']: THREE.MeshStandardMaterial
    ['Material.022']: THREE.MeshStandardMaterial
    ['Material.023']: THREE.MeshStandardMaterial
    Spot: THREE.MeshStandardMaterial
    ['Material.018']: THREE.MeshStandardMaterial
    ['Material.014']: THREE.MeshStandardMaterial
    ['Material.017']: THREE.MeshStandardMaterial
    ['Material.020']: THREE.MeshStandardMaterial
    ['Material.021']: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Wardrobe2(props: JSX.IntrinsicElements['group']) {

  const {dimensions} = useContext(DimensionContext)
  const {material} = useContext(MaterialContext)
  const {base} = useContext(BaseContext)
  const {shownDoors} = useContext(DoorsContext)
  const {shelves} = useContext(ShelvesContext)

  const doorTextureMap = useLoader(THREE.TextureLoader,material.door.src)
  const bodyTextureMap = useLoader(THREE.TextureLoader,material.body.src)
  const railTextureMap = useLoader(THREE.TextureLoader,"/materials/metal.jpg")
  const {x,y,z} = dimensions
  const { nodes, materials } = useGLTF('/wardrobe-2.glb') as GLTFResult

  function generateColumns(amount:number){
    if(amount < 2 ) return [0];
    if(amount < 3) return [-0.5,0.5];
    return [-0.65,0,0.65]
  } 
  function generateDoorSizes(amount:number){
    if(amount < 2 ) return 1;// 1 = 0.5 2 places
    if(amount < 3) return 2/3;
    return 1/2 //0.5 = 0.25 == 4 places
  }
  function generateDoorPositions(amount:number){
    if(amount < 2 ) return [-0.643,0.643];
    if(amount < 3) return[-0.8573,0,0.8573];
    return [-0.9645,-0.3215,0.3215,0.9645]
  }  
  function generateShelfPositions(amount:number){
    if(amount >5)return [0.5,1.25,2,2.75,3.5]
    if(amount >4)return [0.85,1.75,2.5,3.35]
    if(amount >3)return [1,2.25,3.25]
    if(amount >2)return [1.5,3]
    if(amount >0)return [2]
    return []
  } 
  function generateHandlePositions(amount:number){
    if(amount === 2 ) return [-0.1,0.2];
    if(amount == 3) return[-0.5,-0.25,0.6];
    return [-0.70,-0.5,0.6,0.8]
  }
  return (
    <group {...props} dispose={null} scale={[z*2,y,x*2]}>
      <group rotation={[-Math.PI/2,0, Math.PI]}>
        <mesh name="back-side" geometry={nodes.Cube_0.geometry} position={[0, 0, 2.1]}>
           <meshStandardMaterial
           map={bodyTextureMap}
           />
        </mesh>
        <mesh name="bottom-side"
        scale={[1,1,base/10]}
         geometry={nodes.Cube001_0.geometry} material={materials['Material.011']} position={[0.969, 0, 0]}>
        <meshStandardMaterial
           map={bodyTextureMap}
        />
        </mesh>
        <mesh name="left-side" geometry={nodes.Cube002_0.geometry} material={materials['Material.003']} position={[0.964, -1.312, 2.064]}>
        <meshStandardMaterial
           map={bodyTextureMap}/>
        </mesh>
        <mesh name="right-side" geometry={nodes.Cube003_0.geometry} material={materials['Material.002']} position={[0.969, 1.302, 2.051]} >
        <meshStandardMaterial
           map={bodyTextureMap}/>
        </mesh>
        <mesh name="top-view" geometry={nodes.Cube004_0.geometry} material={materials['Material.001']} position={[0.969, 0, 4.119]}>
        <meshStandardMaterial
           map={bodyTextureMap}/>
        </mesh>
        {generateColumns(x/90).map((item,i)=>(
           <mesh key={`divider-1`} scale={[0.95,0.5,4.50]} name="divider-2" geometry={nodes.Cube006_0.geometry} material={materials['Material.010']} position={[0.969, item, 2]} >
           <meshStandardMaterial
           map={bodyTextureMap}
           />
         </mesh>
        ))}
         {generateDoorPositions(x/90).map((item,i)=>(
            <group key={`door-${i}`}>
            <mesh visible={shownDoors[i]} scale={[1,generateDoorSizes(x/90),1.38]} name="main-door-1" geometry={nodes.Cube009_0.geometry} position={[1.85, item, 2.1]} >
              <meshStandardMaterial
              map={doorTextureMap}
              />
            </mesh> 
            <mesh position={[1, item, 3.75]}>
              <cylinderGeometry args={[0.0125,0.0125,generateDoorSizes(x/90) * 1.35,30]}/>
              <meshStandardMaterial
              visible={!shelves[i].isShown}
              map={railTextureMap}
              />
            </mesh>
            </group>
         ))}
          {generateDoorPositions(x/90).map((xPos,i)=>(
            generateShelfPositions(shelves[i].shelf_no + 1).map((yPos)=>(
              <mesh 
              key={`divider-1`}
              visible={shelves[i].isShown}
              name="shelf" scale={[1,(generateDoorSizes(x/90)/2),0.20]} geometry={nodes.Cube005_0.geometry} position={[0.969, xPos, yPos]}>
              <meshStandardMaterial
              map={bodyTextureMap}
              />
              </mesh> 
            ))
         ))}
        {/* 
        </mesh>  */}
        {/* <mesh name="divider-1" scale={[1,0.25,0.20]} geometry={nodes.Cube005_0.geometry} position={[0.969, 0.34, y/y + 1]}>
           <meshStandardMaterial
           map={bodyTextureMap}
           />
        </mesh>  */}
       
      
        {generateHandlePositions(x/90).map((item,i)=>(
            <group key={`model-doors-${i}`} visible={shownDoors[i]} scale={[1,0.5,1]} name="full-handle" position={[0,item,0]}>
            <mesh geometry={nodes.Cylinder_0.geometry} name="holder-down" material={materials['Material.016']} position={[1.96, -0.108, 2.386]} rotation={[Math.PI / 2, 1.571, 0]} />
            <mesh geometry={nodes.Cylinder001_0.geometry} name="holder-up"  material={materials['Material.015']} position={[1.96, -0.108, 2.799]} rotation={[Math.PI / 2, 1.571, 0]} />
            <mesh geometry={nodes.Cube012_0.geometry} name="handle-bar" material={materials['Material.017']} position={[2.008, -0.101, 2.606]} />
          </group> 
        ))}
      </group>
    </group>
  )
}

useGLTF.preload('/wardrobe-2.glb')
